MVC+JDBC
1、视图层
	・index.jsp 超链接到servlet控制层
	・show.jsp  显示所有的用户信息（key = list） List<User>
		控制层已经将数据保存在session的list中
2、控制层
	・查询数据
	・将数据保存在session的list中
	・重定向回到视图层


DAO数据访问对象
	・低级的数据访问 API 或操作从高级的业务服务中分离出来
	・面向接口编程  IOP 
		好处：
			1.接口可以有多种实现，能够应用到多种场合（多态），方便维护和扩展
			2.接口可以用来制定标准和规范
			3.降低模块耦合度，不影响上层开发
			
DAO开发流程
1、将数据表映射为实体类
	test.user表  ---> cn.edu.pzhu.entity.User
2、公共接口
	・用 【泛型】 代表任意的实体类型  
	・用【泛型】代表任意实体的主键类型
		1.一般是可序列化的
		2.必须是引用类型  Integer
3、子接口 UserDAO
	・按照实际需要来补充方法
	・指定泛型的具体类型（实体类型和主键类型）
4、子接口的实现
	・implements
	・实现公共接口和子接口中的所有方法
5、业务层接口
	・根据实际功能定义方法
	・可以使用自定义返回类型，例如message
6、业务层实现


实验：注册
1、视图层开发
	・无论成功还是失败都回到这个index.jsp
	・在index.jsp上显示提示信息
	・假设提示信息已经保存在session的msg中
2、控制层开发
	・接收参数
	・构造实体类
	・初始化业务层接口
	・调用业务层接口实现操作
	・根据操作结果进行数据保存和转发
3、业务层开发
	・初始化DAO层
	・调用DAO层方法进行底层实现
	・返回结果
4、DAO层开发
	・实现最底层的JDBC操作











